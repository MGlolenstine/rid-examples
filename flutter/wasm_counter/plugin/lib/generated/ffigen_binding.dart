// ignore_for_file: non_constant_identifier_names, unused_import, camel_case_types

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:wasmjsgen`.

import 'dart:async' as dart_async;
import 'dart:convert' as dart_convert;
import 'dart:typed_data' as dart_typed;
import 'package:wasm_interop/wasm_interop.dart' as wasm_interop;

class NativeLibrary {
  /// The symbol lookup function.
  T _lookup<T>(String name) {
    return _wasmInstance.functions[name] as T;
  }

  wasm_interop.Memory get memory {
    return _wasmInstance.memories['memory']!;
  }

  dart_typed.Uint8List get memView {
    return _wasmInstance.memories['memory']!.buffer.asUint8List();
  }

  int get memBytes => memory.lengthInBytes;
  int get memPages => memory.lengthInPages;
  int get memPageSize => (memBytes / memPages).floor();
  int get memElemByteSize => memView.elementSizeInBytes;

  final wasm_interop.Instance _wasmInstance;
  NativeLibrary(this._wasmInstance);

  // --- rid_malloc ---
  Pointer<Uint8> rid_malloc(
    int size,
  ) {
    return Pointer.fromAddress(
      Uint8(
        _rid_malloc(
          size,
        ),
      ),
    );
  }

  late final int Function(
    int,
  ) _rid_malloc = _lookup('rid_malloc');

  // --- rid_realloc ---
  Pointer<Uint8> rid_realloc(
    Pointer<Uint8> ptr,
    int old_size,
    int new_size,
  ) {
    return Pointer.fromAddress(
      Uint8(
        _rid_realloc(
          ptr.address,
          old_size,
          new_size,
        ),
      ),
    );
  }

  late final int Function(
    int,
    int,
    int,
  ) _rid_realloc = _lookup('rid_realloc');

  // --- rid_free ---
  void rid_free(
    Pointer<Uint8> ptr,
    int size,
  ) {
    return _rid_free(
      ptr.address,
      size,
    );
  }

  late final void Function(
    int,
    int,
  ) _rid_free = _lookup('rid_free');

  // --- rid_poll_reply ---
  Pointer<ReplyStruct> rid_poll_reply() {
    return Pointer.fromAddress(
      ReplyStruct(
        _rid_poll_reply(),
      ),
    );
  }

  late final int Function() _rid_poll_reply = _lookup('rid_poll_reply');

  // --- rid_handled_reply ---
  void rid_handled_reply(
    int req_id,
  ) {
    return _rid_handled_reply(
      req_id.toString(),
    );
  }

  late final void Function(
    JsBigInt,
  ) _rid_handled_reply = _lookup('rid_handled_reply');

  // --- rid_rawreplystruct_debug ---
  Pointer<Int8> rid_rawreplystruct_debug(
    Pointer<RawReplyStruct> ptr,
  ) {
    return Pointer.fromAddress(
      Int8(
        _rid_rawreplystruct_debug(
          ptr.address,
        ),
      ),
    );
  }

  late final int Function(
    int,
  ) _rid_rawreplystruct_debug = _lookup('rid_rawreplystruct_debug');

  // --- rid_rawreplystruct_debug_pretty ---
  Pointer<Int8> rid_rawreplystruct_debug_pretty(
    Pointer<RawReplyStruct> ptr,
  ) {
    return Pointer.fromAddress(
      Int8(
        _rid_rawreplystruct_debug_pretty(
          ptr.address,
        ),
      ),
    );
  }

  late final int Function(
    int,
  ) _rid_rawreplystruct_debug_pretty =
      _lookup('rid_rawreplystruct_debug_pretty');

  // --- rid_cstring_free ---
  void rid_cstring_free(
    Pointer<Int8> ptr,
  ) {
    return _rid_cstring_free(
      ptr.address,
    );
  }

  late final void Function(
    int,
  ) _rid_cstring_free = _lookup('rid_cstring_free');

  // --- rid_replystruct_ty ---
  int rid_replystruct_ty(
    Pointer<RawReplyStruct> ptr,
  ) {
    return _rid_replystruct_ty(
      ptr.address,
    );
  }

  late final int Function(
    int,
  ) _rid_replystruct_ty = _lookup('rid_replystruct_ty');

  // --- rid_replystruct_req_id ---
  int rid_replystruct_req_id(
    Pointer<RawReplyStruct> ptr,
  ) {
    return jsBigIntToInt(
      _rid_replystruct_req_id(
        ptr.address,
      ),
    );
  }

  late final JsBigInt Function(
    int,
  ) _rid_replystruct_req_id = _lookup('rid_replystruct_req_id');

  // --- rid_replystruct_data ---
  Pointer<Int8> rid_replystruct_data(
    Pointer<RawReplyStruct> ptr,
  ) {
    return Pointer.fromAddress(
      Int8(
        _rid_replystruct_data(
          ptr.address,
        ),
      ),
    );
  }

  late final int Function(
    int,
  ) _rid_replystruct_data = _lookup('rid_replystruct_data');

  // --- rid_replystruct_data_len ---
  int rid_replystruct_data_len(
    Pointer<RawReplyStruct> ptr,
  ) {
    return _rid_replystruct_data_len(
      ptr.address,
    );
  }

  late final int Function(
    int,
  ) _rid_replystruct_data_len = _lookup('rid_replystruct_data_len');

  // --- rid_rawstore_debug ---
  Pointer<Int8> rid_rawstore_debug(
    Pointer<RawStore> ptr,
  ) {
    return Pointer.fromAddress(
      Int8(
        _rid_rawstore_debug(
          ptr.address,
        ),
      ),
    );
  }

  late final int Function(
    int,
  ) _rid_rawstore_debug = _lookup('rid_rawstore_debug');

  // --- rid_rawstore_debug_pretty ---
  Pointer<Int8> rid_rawstore_debug_pretty(
    Pointer<RawStore> ptr,
  ) {
    return Pointer.fromAddress(
      Int8(
        _rid_rawstore_debug_pretty(
          ptr.address,
        ),
      ),
    );
  }

  late final int Function(
    int,
  ) _rid_rawstore_debug_pretty = _lookup('rid_rawstore_debug_pretty');

  // --- create_store ---
  Pointer<RawStore> create_store() {
    return Pointer.fromAddress(
      RawStore(
        _create_store(),
      ),
    );
  }

  late final int Function() _create_store = _lookup('create_store');

  // --- rid_store_lock ---
  void rid_store_lock() {
    return _rid_store_lock();
  }

  late final void Function() _rid_store_lock = _lookup('rid_store_lock');

  // --- rid_store_unlock ---
  void rid_store_unlock() {
    return _rid_store_unlock();
  }

  late final void Function() _rid_store_unlock = _lookup('rid_store_unlock');

  // --- rid_store_free ---
  void rid_store_free() {
    return _rid_store_free();
  }

  late final void Function() _rid_store_free = _lookup('rid_store_free');

  // --- rid_store_count ---
  int rid_store_count(
    Pointer<RawStore> ptr,
  ) {
    return _rid_store_count(
      ptr.address,
    );
  }

  late final int Function(
    int,
  ) _rid_store_count = _lookup('rid_store_count');

  // --- rid_msg_Inc ---
  void rid_msg_Inc(
    int __rid_req_id,
  ) {
    return _rid_msg_Inc(
      __rid_req_id.toString(),
    );
  }

  late final void Function(
    JsBigInt,
  ) _rid_msg_Inc = _lookup('rid_msg_Inc');

  // --- rid_msg_Add ---
  void rid_msg_Add(
    int __rid_req_id,
    int arg0,
  ) {
    return _rid_msg_Add(
      __rid_req_id.toString(),
      arg0,
    );
  }

  late final void Function(
    JsBigInt,
    int,
  ) _rid_msg_Add = _lookup('rid_msg_Add');

  // --- rid_msg_AddStringLen ---
  void rid_msg_AddStringLen(
    int __rid_req_id,
    Pointer<Int8> arg0,
  ) {
    return _rid_msg_AddStringLen(
      __rid_req_id.toString(),
      arg0.address,
    );
  }

  late final void Function(
    JsBigInt,
    int,
  ) _rid_msg_AddStringLen = _lookup('rid_msg_AddStringLen');

  // --- include_reply ---
  void include_reply() {
    return _include_reply();
  }

  late final void Function() _include_reply = _lookup('include_reply');
  @override
  String toString() {
    final functions = _wasmInstance.functions.keys.map((x) => '\n     $x');
    final elemSize = memElemByteSize;
    int bytesUsed = 0;
    for (int i = 0; i < memView.length; i += elemSize) {
      if (memView[i] != 0) bytesUsed++;
    }
    return '''Wasm NativeLibrary {
  Memory {
    Page Size:        $memPageSize
    Elem Byte Size:   $elemSize
    Pages:            $memPages
    Bytes Total:      $memBytes
    Bytes Used:       $bytesUsed
  }
  functions: $functions
  functionCount: ${functions.length}
}
''';
  }

  static NativeLibrary? _instance;
  static NativeLibrary get instance {
    assert(_instance != null,
        "need to NativeLibrary.init() before accessing instance");
    return _instance!;
  }

  static Future<NativeLibrary> init(dart_typed.Uint8List moduleData) async {
    final wasm_interop.Instance instance =
        await wasm_interop.Instance.fromBytesAsync(moduleData);
    _instance = NativeLibrary(instance);
    return NativeLibrary.instance;
  }
}

class RawReplyStruct extends Opaque {
  RawReplyStruct(int address) : super(address);
}

class RawStore extends Opaque {
  RawStore(int address) : super(address);
}

typedef uintptr_t = Uint64;

class ReplyStruct extends Opaque {
  ReplyStruct(int address) : super(address);
}

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int UINTPTR_MAX = -1;

const int UINTMAX_MAX = -1;

const int SIZE_MAX = -1;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

// Base for Native Types and Opaque Structs
class Opaque {
  final int _address;
  int get address => _address;
  Opaque(this._address);
}

// FFI Pointer Replacement
class Pointer<T extends Opaque> {
  final T _opaque;
  Pointer._(this._opaque);
  factory Pointer.fromAddress(T opaque) {
    return Pointer._(opaque);
  }
  int get address => _opaque.address;
}

// Dart FFI Native Types
class Void extends Opaque {
  Void(int address) : super(address);
}

class Uint8 extends Opaque {
  Uint8(int address) : super(address);
}

class Int8 extends Opaque {
  Int8(int address) : super(address);
}

class Int16 extends Opaque {
  Int16(int address) : super(address);
}

class Int32 extends Opaque {
  Int32(int address) : super(address);
}

class Int64 extends Opaque {
  Int64(int address) : super(address);
}

class Uint16 extends Opaque {
  Uint16(int address) : super(address);
}

class Uint32 extends Opaque {
  Uint32(int address) : super(address);
}

class Uint64 extends Opaque {
  Uint64(int address) : super(address);
}

class Float extends Opaque {
  Float(int address) : super(address);
}

class Double extends Opaque {
  Double(int address) : super(address);
}

class IntPtr extends Opaque {
  IntPtr(int address) : super(address);
}

// --- JsBigInt and conversion ---
typedef JsBigInt = String;

// Only reliable way I found to convert JS BigInt to int.
// It is used to convert uint64_t and int64_t.
// Dart int is 64bit (signed). A u64 will not fit if it is larger than max i64.
// However in most scenarios we will not hit this max value.
//   Max u64 is 18,446,744,073,709,551,615
//   Max i64 is  9,223,372,036,854,775,807
// Thus we take a shortcut to avoid having to deal with Dart BigInt.
int jsBigIntToInt(JsBigInt n) {
  return int.parse(n);
}

// --- Pointer<Int8> to Dart String conversion ---
const dart_convert.Utf8Codec utf8Codec = dart_convert.Utf8Codec();
String toDartString(Pointer<Int8> ptr) {
  return _decodeUtf8ListString(NativeLibrary.instance.memView, ptr.address);
}

String _decodeUtf8ListString(dart_typed.Uint8List codeUnits, int address) {
  final end = _end(codeUnits, address);
  return utf8Codec.decode(codeUnits.sublist(address, end));
}

int _end(dart_typed.Uint8List codeUnits, int start) {
  int end = start;
  while (codeUnits[end] != 0) end++;
  return end;
}

typedef MallocUint8 = Pointer<Uint8> Function(int);

Pointer<Uint8> toUint8Pointer(String s, MallocUint8 malloc) {
  final encoded = utf8Codec.encode(s);

  final Pointer<Uint8> ptr = malloc(encoded.length + 1);
  final list = dart_typed.Uint8List.fromList(encoded);

  final start = ptr.address;
  final end = ptr.address + list.length;
  NativeLibrary.instance.memView.setRange(start, end, list);
  NativeLibrary.instance.memView.fillRange(end, end + 1, 0);

  return ptr;
}

extension ToNativeInt8Extension on String {
  Pointer<Int8> toNativeInt8() {
    // TODO: `rid_malloc` needs to be configured or passed somehow
    final ptr = toUint8Pointer(this, NativeLibrary.instance.rid_malloc);
    return Pointer.fromAddress(Int8(ptr.address));
  }
}
